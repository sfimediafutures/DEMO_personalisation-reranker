---
import ImageItem from "../components/ImageItem.astro"
export interface Props {
    title?: string
}

const n = 20
let n_rec: Array<number>
n_rec = []
Array.from({ length: n }, (x, i) => {n_rec.push(i)})


---
<section class="content" id='content'>
    <div class="content_info">
    <div class="primary_image">
        <img id="primary_image" src="https://via.placeholder.com/200X300" alt="">
    </div>
    <div class="text_content">
        <h5 id='item_title'>
            Title!!
        </h5>
        <p id='item_body'>
            Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.
        </p>
    </div>
    <div class="features">
        <p id='saturation'>Saturation: </p>
        <p id="sharpness">Sharpness: </p>
        <p id="entropy">Entropy: </p>
        <!-- <p id="contrast">Contrast: </p>
        <p id="colorfullness">Colorfullness: </p>
        <p id="brightness">Brightness: </p> -->
    </div>
    </div>
    </section>
<div class='main'>
    <div class="grad_container">
        <div class="gradient_image" id="gradient_image"></div>
        <img src="" alt="" class="main_img" id='main_img'>
    </div>
    
<div id='one'>

<section class="initial_homepage">
    <h2>Mainstream User</h2>
    <div class='user-explanation'>
    <div class="profile">
        <img src="/assets/mainstream.png" alt="">
    </div>
        <p>Judging by the rating history, this person seems to prefer very popular mainstream movies. Clasically, such users are treated better by standard recommendation algorithms, maintaining the same popularity level of suggested movies to watch. Not much change in reranking is expected here - the recommendation list is supposedly already rather fitting.</p>
    </div>
</section>
<h3 class='session_header'>What our mainstream user likes</h3>
<section class="item_recommendation" id='first'>
    {n_rec.map((i) => (
        <ImageItem id={`${i}`}></ImageItem>
    ))}
</section>

<h3 class='session_header'>A regular SVD recommendation</h3>
<section class="item_recommendation" id='second'>
    {n_rec.map((i) => (
        <ImageItem id={`${i}`}></ImageItem>
    ))}
</section>

<h3 class='session_header'>SVD-Reranked recoommendation taking our user preference into account</h3>
<section class="item_recommendation" id='third'>
    {n_rec.map((i) => (
        <ImageItem id={`${i}`} ></ImageItem>
    ))}
</section>
</div>

<div id='two'>
    <section class="initial_homepage">
        <h2>Niche User</h2>
        <div class='user-explanation'>
            <div class="profile">
                <img src="/assets/niche.png" alt="">
            </div>
                <p>This person is less fond of mainstream movies and potentially would not be satisfied with a standard recommendation with higher popularity. The reranking effect is expected to be more visible in such case, lowering the popularity level of recommended movies.</p>
            </div>
    </section>
    
    <h3 class='session_header'>What our niche user likes</h3>
    <section class="item_recommendation" id='fourth'>
        {n_rec.map((i) => (
            <ImageItem id={`${i}`}></ImageItem>
        ))}
    </section>
    
    <h3 class='session_header'>A regular SVD recommendation</h3>
    <section class="item_recommendation" id='fifth'>
        {n_rec.map((i) => (
            <ImageItem id={`${i}`}></ImageItem>
        ))}
    </section>

    <h3 class='session_header'>SVD-Reranked recommendation taking our user preference into account</h3>
    <section class="item_recommendation" id='sixth'>
        {n_rec.map((i) => (
            <ImageItem id={`${i}`}></ImageItem>
        ))}
    </section>
    </div>
</div>
<style>

    .user-explanation {
        margin: 0 0 1rem 3rem;
        display: flex;

    }

    .user-explanation > p {
        margin: 0 1rem 0 2rem;
        width: 70%;
    }

    .profile {
        width: 150px;
        height: 150px;
        background-color: #fff;
        border-radius: 50%;
        overflow: hidden;
        border: 3px solid rgba(0, 0, 0, 0.6);
        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
    }

    .profile > img {
        width: 120%;
        position: relative;
        left: -14px;


    }
    .main {
        display: flex;
        max-width: 100%;
        flex-direction: row;
    }

    #one {
        width: 50%;
    }

    #two {
        width: 50%;
    }

    .show {
        animation: fadeIn .5s forwards;
    }

    @-webkit-keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @-webkit-keyframes fadeOut {
        from { opacity: 1; }
        to { opacity: 0; }
    }
    @keyframes fadeOut {
        from { opacity: 1; }
        to { opacity: 0; }
    }
    .hidden {
        -webkit-animation: fadeOut .2s;
        animation: fadeOut .2s;
    }
    :root {
        --slider-index: 0;
    }
    body {
        background-color: #020A14;
    }
    .features {
        margin: 2rem 0 0 2rem;
    }
    .features > p {
        padding: 0;
        margin: 0;
        font-family: K2D;
        font-size: 20px;
        font-weight: 300;
        line-height: 30px;
        letter-spacing: 0em;
        text-align: left;

    }
    .tile {
        display: flex;
        flex-direction: row;
        align-items: center;
        
    }
    .tile > p {
        padding: 0 0 0 1rem;
    }
    .color_tiles {
        width: 10%;
        margin: 2rem 0 0 0;
    }
    #tile1 {
        height: 40px;
        width: 40px;
        background-color: #fff;
    }
    #tile2 {
        height: 40px;
        width: 40px;
        background-color: #fff;
    }
    #tile3 {
        height: 40px;
        width: 40px;
        background-color: #fff;
    }
    #tile4 {
        height: 40px;
        width: 40px;
        background-color: #fff;
    }
    .color_wheel {
        width: 180px;
        height: 180px;
        margin: 2rem 0 0 0;
        border-radius: 50%;
        background: conic-gradient(from 180deg at 50% 50%, #020A14 -52.5deg, #ACC5D0 43.12deg, #DC2630 136.88deg, #588495 223.05deg, #020A14 307.5deg, #ACC5D0 403.12deg);
    }

    .session_header {
        margin: 0 0 1rem 3rem;
        color: #fff;
        font-family: 'K2D', serif;
        font-weight: 200;
        font-style: normal;
    }
    h2 {
        text-align: center;
        color: #fff;
        font-family: 'K2D', serif;
        font-style: normal;
        font-weight: 200;
        font-size: 25px;
        line-height: 30px;
    }
    h3 {
        color: #fff;
        font-family: 'K2D', serif;
        font-style: normal;
    }

    .text_content {
        margin: 1rem 0 0 1rem;
        width: 35%;
    }

    .text_content > h5 {
        margin: 0;
        padding: 0;
        color: #fff;
        font-family: 'K2D', serif;
        font-style: normal;
        font-weight: 200;
        font-size: 25px;
        line-height: 30px;
    }

    p {
        color: #fff;
        font-family: 'K2D', serif;
        font-size: 16px;
        font-weight: 300;
        line-height: 30px;
        letter-spacing: 0em;
        text-align: left;

    }
    
    body {
        background-color: #181818;
    }

    .item_recommendation {
        display: flex;
        overflow-y: scroll;
        overflow-y: hidden;
        margin: 0rem 3rem 0 3rem;
        

        -ms-overflow-style: none;  /* Internet Explorer 10+ */
        scrollbar-width: none;  /* Firefox */
    }

    .item_recommendation::-webkit-scrollbar {
        display: none;  /* Safari and Chrome */
    }

    .content {
        display: none;
        opacity: 0;
        width: 100%;
        flex-direction: column;
    }
    .content_info {
        width: 100%;
        margin: 2rem 3rem 3.5rem 3rem;
        align-items: center;
        display: flex;
    }

    .primary_image {
        width: 200px;
        height: 300px;
        margin: 1rem 0 0 0;
    }
    #primary_image{
        width: 100%;
        height: 100%;
    }
    
    .grad_container {
        width: 100%;
        height: auto;
    }
    .main_img {
        width: 100%;
        height: auto;
        z-index: -100;
        position: absolute;
        top: -10px;
        object-fit: fill;
    }
    .gradient_image {
        top: -10px;
        z-index: -90;
        object-fit: fill;
        height: 120%;
        position: absolute;
        width: 100%;
        background: linear-gradient(180deg, rgba(0, 0, 0, 0.13) 0%, #181818 20.00%) ;
    }

    #third {

    }
</style>

<script type="module" is:inline defer>
    // ======================= API CALLS =======================
	async function getData(url) {
		const response = await fetch(url)
		return response.json()
	}

    async function getImageFromSource(tmdbId){
        const f = await fetch(`http://0.0.0.0/api/movies/image/${tmdbId}`)
        const j = await f.json()
        return j;
    }

    async function getPosters(user, section, rec) {
        const data = await getData(`http://0.0.0.0:8000/api/recommendation/${user}/${rec}`)
        await Promise.all(data.movies.map(async (element, index) => {
            const top20 = document.getElementById(section)
            const item = top20.querySelector(`#image_item_${index}`)
            const item_detail = await getImageFromSource(element.tmdbId)
            item.src = `https://image.tmdb.org/t/p/w200/${item_detail.poster_path}`
            item.dataset.id = element.tmdbId
		 }))

    }
    // ========================= MAIN ==========================
    const user1 = 485
    const user2 = 92

    async function loadContent() {
        // User1 
        getPosters(user1, 'first', 'original')
        getPosters(user1, 'second', 'SVD')
        getPosters(user1, 'third', 'SVD-Reranked')

        // User2
        getPosters(user2, 'fourth', 'original')
        getPosters(user2, 'fifth', 'SVD')
        getPosters(user2, 'sixth', 'SVD-Reranked')

    
    }

    async function showDetails(movie_id) {
        const response = await getImageFromSource(`${movie_id}`)
        
        const data = response
        const content = document.getElementById('content')
        content.classList.remove('hidden')
        content.style.display='flex'
        content.classList.add('show')
        

        // Get elements
        const main_image = document.getElementById('main_img')
        const primary_image = content.querySelector('#primary_image')
        const title = content.querySelector('#item_title')
        const bodytext = content.querySelector('#item_body')

        const saturation = content.querySelector('#saturation')
        const sharpness = content.querySelector('#sharpness')
        const entropy = content.querySelector('#entropy')
        const contrast = content.querySelector('#contrast')
        const colorfullness = content.querySelector('#colorfullness')
        const brightness = content.querySelector('#brightness')

        // Set elemets
        primary_image.src = `https://image.tmdb.org/t/p/w200${data.poster_path}`

        //title.textContent = `${data.Title} (${data.Released})`
        main_image.src = `https://image.tmdb.org/t/p/w1280${data.backdrop_path}`
        title.textContent = `${data.original_title}`
        bodytext.textContent = data.overview
  
        saturation.textContent = `Popularity: ${data.popularity}`
        sharpness.textContent = `Vote Average: ${data.vote_average}`
        entropy.textContent = `Vote Count: ${data.vote_count}`
        // contrast.textContent = `Contrast: ${data.contrast.toFixed(2)}`
        // colorfullness.textContent = `Colorfullness: ${data.colorfulness.toFixed(2)}`
        // brightness.textContent = `Brightness: ${data.brightness.toFixed(2)}`

        const main_img = document.getElementById('gradient_image')
        main_img.style.background = "linear-gradient(180deg, rgba(0, 0, 0, 0.13) 0%, #181818 50.00%)"
    }

    function goHome() {
        const content = document.getElementById('content')
        const main_img = document.getElementById('gradient_image')
        
        content.classList.add('hidden')
        content.classList.remove('show')
        setTimeout(() => {
            
            content.style.display='none';
            main_img.style.background = "#181818"
            
        }, 200)

        


        
        
    }
    // ========================= LOGIC ==========================
    document.addEventListener('click', e => {

        if (e.target.matches('.movie')) {

            showDetails(e.target.dataset.id)
        }

        if (e.target.matches('.one') || e.target.matches('.header-img')){

            goHome()
        }
    });


    // ========================= DEFER ==========================

    loadContent()
</script>
